# What is the purpose of a controller?
---
To receive specific requests for the application

# ______ decides which controller receives which requests.
---
Routing

# Often there is more than one route to each controller and different routes can be served by different actions. What is the purpose of an action?
---
To collect information to provide it to a view

# What is the purpose of a view?
---
To display information in a human readable format

# Information is collected in the _________ (controller/view).
---
Controller

# By default, view templates are written in a language called ______.
---
eRuby (embedded Ruby)

# What is a resource? 
---
A collection of similar objects such as articles, people, or animals. Items of a resource can be created, read, updated, and destroyed (CRUD).

# What do the two extensions mean for this file? `app/views/articles/new.html.erb`?
---
The first extension is the format of the template. The second is the handler that will be used to render the template.

# What is the name of the helper method that provides the primary form builder for Rails?
---
form_with

# By what method does form_with submit forms, by default?
---
Ajax. To disable, specify `local: true` in the form_with options

# What is the default response in Rails for an action that we do not specify the response for?
---
`204 No Content`

# When a form is submitted, the fields of the form are sent to Rails as __________.
---
parameters

# What is the name of the object which represents the parameters coming in from the form?
---
params. It is a method which returns an ActionController::Parameters object, which allows you to access the keys of the hash using either strings or symbols.

# What are migrations?
---
Ruby classes designed to make it simple to create and modify database tables

# What does Ruby use to run migrations? Is it possible to undo a migration after it has been applied to your database? How does Ruby ensure migrations are processed in the order they were created?
---
rake commands; yes; migration filenames include a timestamp

# What are strong parameters?
---
One of the security features of Rails that helps prevent accidentally allowing users to update sensitive model attributes.

Action Controller parameters are forbidden to be used in Active Model mass assignments unless they have been permitted.

Parameters can be marked as required and will flow through a predefined raise/rescue flow that will result in a 400 Bad Request being returned if not all required parameters are passed in.

https://guides.rubyonrails.org/v6.0/action_controller_overview.html#strong-parameters

Example:
The following would raise an ActiveModel::ForbiddenAttributesError exception because it's using mass assignment without an explicit permit step.
```
def create
  @article = Article.new(params[:article])
 
  @article.save
  redirect_to @article
end
```

This works.
```
def create
  @article = Article.new(article_params)

  @article.save
  redirect_to @article
end

private

def article_params
  params.require(:article).permit(:title, :text)
end
```

# What is a common ordering of the standard actions [create, show, update, destroy, new, show, edit, index]?
---
index, show, new, edit, create, update, destroy

# Why do we use an instance variable to hold a reference to the object that we want to show?
---
Rails passes all instance variables to the view

# What does `link_to` do?
---
Creates a hyperlink based on text to display and where to go
Example: 
`<%= link_to 'My Blog', controller: 'articles' %>`

# When would you want to use `render` instead of `redirect_to`?
---
One good case for using `render` instead of `redirect_to` is when a user submits a form but the form does not meet some validation criteria. If we redirect, we tell the browser to issue another request, which will clear all the fields the user has typed in the form. `render` passes the instance variables in existence back to the specified template when it is rendered, so the form fields will be filled with the values the user had put into them. The rendering is done within the same request, a redirect issues a new request.

# Rails automatically wraps fields that contain an error with a div with class ______________.
---
field_with_errors

# What does the model option of the `form_with` option do? Example:  `<%= form_with(model: @article, local: true) do |form| %>`
---
Automatically sets the URL for submitting the edited form. 
Tells Rails that we want the form to be submitted via the PATCH HTTP method, which is the HTTP method you are expected to use to update resources according to the REST protocol.

# Why can you use `<%= form_with model: @article, local: true do |form| %>` in a partial that would be used for the `create` and `edit` actions?
---
@article is a resource corresponding to a full set of RESTful routes, and Rails is able to infer which URI and method to use

# What is `:references` in the bash command `rails generate model Comment commenter:string body:text article:references`?
---
It is a special data type for models. It creates a new column on your database table with the provided model name appended with an _id that can hold integer values.

# When you run `rails db:migrate`, does Rails execute every migration even if it has already been run against the current database?
---
No. Rails is smart enough to only execute the migrations that have not already been run against the current database.

# As the `render` method iterates over a collection, it assigns each item to a local variable of what name? 

** NOT SURE ON THIS **
For example: Suppose you have `<%= render @article.comments %>` in `app/views/articles/show.html.erb`, and the partial is located in `app/views/comments/_comment.html.erb`:
```
<p>
  <strong>Commenter:</strong>
  <%= comment.commenter %>
</p>
<p>
  <strong>Comment:</strong>
  <%= comment.body %>
</p>
```
---
The same name as the partial, which is then available in the partial for us to show
